#+title: ir.el - Incremental Reading

The term is orginally coined by Piotr Wozniak and he describes it as:
#+begin_quote
Incremental reading is a learning technique that makes it possible to read thousands of articles at the same time without getting lost. Incremental reading begins with importing articles from electronic sources, e.g. the Internet. The student then extracts the most important fragments of individual articles for further review. Extracted fragments are then converted into questions and answers. These in turn become subject to systematic review and repetition that maximizes the long-term recall.
#+end_quote
[[https://super-memory.com/help/read.htm#Introduction_to_incremental_reading][Introduction to Incremental Reading]]

This project aims to cover all the useful features of incremental reading. The
main features I have implemented so far are *scheduling of material* and
*extraction from PDFs*.

The current way to create questions and clozes out of the extracts is to write
them out using [[https://www.github.com/adham-omran/ankifier][ankifier]] but I want to improve on this in the future.

* Tutorial
@TODO

* What's Next?
- [ ] Implement extraction from org-mode files.
- [ ] Implement a more user friendly way to create questions.
- [ ] Implement features to get results in a more easy to read form.
- [ ] Implement functions to view the data.
- [ ] Implement Zotero integration. The ability to add pdfs from a Zotero
  collection.
- [ ] Implement ordering by priority.

* Design of the Database
Using ~emacsql~ I created the following table.

| Column   | Affinity | Description                  |
|----------+----------+------------------------------|
| id       | TEXT     | Unique ID using ~org-id~       |
| afactor  | REAL     | [[https://super-memory.com/help/g.htm#A-Factor][A-Factor]]                     |
| interval | INTEGER  | [[https://super-memory.com/help/g.htm#Interval][Interval]]                     |
| priority | INTEGER  | [[https://super-memory.com/help/g.htm#Priority][Priority]]                     |
| date     | INTEGER  | Date of next repetition      |
| type     | TEXT     | Type of file (org-mode, pdf) |
| path     | TEXT     | Path to file if applicalble  |

One of my goals is to support as many possible file types as possible. This
would allow one to incrementally learn any piece of material. This also allows
others to easily extend the program by including their favorite file types and
programs to open them.

One way to query the database is to sort the ~ir~ table by date, then match the
file type to a function that opens that file type.

Such files have a path which is inserted in the path column.

Example
| File type | Method          | Description.          |
|-----------+-----------------+-----------------------|
| text      | org-id-find     | A simple org heading. |
| pdf       | dired-find-file | A pdf file.           |
| mp4       | @TODO           | A video.              |
** Algorithm Design

I use a simplified SM2 algorithm to calculate the intervals. The A Factor
increases by 0.08 per repetition.

$\text{New Interval} = \text{round}(\text{Old Interval} \times \text{A Factor})$

$\text{New Date} = \text{Old Date} + \text{New Interval}$
